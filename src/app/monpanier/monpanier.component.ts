import { JsonPipe } from '@angular/common';
import { Component, OnInit } from '@angular/core';
import { Route, Router } from '@angular/router';
import { Achat } from '../achat';
import { Article } from '../article';
import { Client } from '../client';
import { ClientService } from '../client.service';
import { Commande } from '../commande';
import { CommandeArticle } from '../commande-article';
import { CommandeService } from '../commande.service';
import { CommandearticleService } from '../commandearticle.service';
import { IdCommandeArticle } from '../id-commande-article';

@Component({
  selector: 'app-monpanier',
  templateUrl: './monpanier.component.html',
  styleUrls: ['./monpanier.component.scss']
})
export class MonpanierComponent implements OnInit {

  header: string
  footer: string
  panier: Array<Achat>
  client: Client

  constructor(private router: Router, private cmdsrv:CommandeService, private clientsrv:ClientService) { }

  ngOnInit(): void {
    if (JSON.parse(sessionStorage.getItem("client"))) {
      let client = JSON.parse(sessionStorage.getItem("client"));
      this.header = "La commande de " +  client.nom + " " + client.prenom;
    }
    if (JSON.parse(sessionStorage.getItem("totalp")) != null) {
      this.footer = "Total du panier : " + JSON.parse(sessionStorage.getItem("totalp")) +" â‚¬";
    }
    this.panier = JSON.parse(sessionStorage.getItem("panier"));
    this.client = JSON.parse(sessionStorage.getItem("client"));
  }

  /**
   * Navigate to catalogue's page. Check if client is still connected.
   */
   catalogue(){
    if (JSON.parse(sessionStorage.getItem("client"))==null) {
      this.router.navigate(['connexion'])
    }else{
      this.router.navigate(['catalogue'])
    }    
  }

  /**
   * Save the commande in the DB and get the autogenerated ID of commande. Store the Id and the paid price on session. 
   * Reset the totolp. Then navigate to validation's page
   */
   validation(){
    if (JSON.parse(sessionStorage.getItem("client"))==null) {
      this.router.navigate(['connexion'])
    }else{
      let client:Client = JSON.parse(sessionStorage.getItem("client"));
      let totalp = JSON.parse(sessionStorage.getItem("totalp"));
      this.cmdsrv.create(client,totalp).subscribe(
        response=>{sessionStorage.setItem("numCom",JSON.stringify(response.id));
        if (response) {
          this.router.navigate(['validationpanier'])
        }else{
          this.router.navigate(['erreurcommande'])
        }
        
      });
      sessionStorage.setItem("totalfinal",JSON.stringify(totalp));
      sessionStorage.setItem("totalp", null);
      
    }    
  }
  /**
   * Empty the panier and totalp and redirect to catalogue()
   */
   reset(){
    this.panier=null
    this.footer=""
    sessionStorage.setItem("panier", null)
    sessionStorage.setItem("totalp", null)
    this.clientsrv.Islogged()
    this.catalogue()
  }

  /**
   * add 1 to the quantite of an achat
   * @param nom the name of the Article in the panier
   */
  addQte(nom:string){
    for (const achat of this.panier) {
      if (achat.article.nom == nom) {
        achat.quantite +=1
      }
    }
    sessionStorage.setItem("panier",JSON.stringify(this.panier))
  }

  /**
   * remove 1 to the quantite of an achat
   * @param nom the name of the Article in the panier
   */
  removeQte(nom:string){
    for (const achat of this.panier) {
      if (achat.article.nom == nom) {
        achat.quantite -=1
      }
    }
    sessionStorage.setItem("panier",JSON.stringify(this.panier))
  }

}
